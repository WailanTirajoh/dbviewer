<div class="dbviewer-sidebar-top">
  <div class="dbviewer-table-filter-container p-1 mb-0">
    <input type="text" class="form-control form-control-sm dbviewer-table-filter mb-0" 
           id="tableSearch" placeholder="Filter tables..." aria-label="Filter tables">
  </div>
  

  
  <!-- Add custom styling for datetime inputs -->
  <style>
    /* Better datetime input styling */
    input[type="datetime-local"] {
      padding-right: 0.5rem;
    }
    
    /* Dark mode support for datetime inputs */
    [data-bs-theme="dark"] input[type="datetime-local"] {
      background-color: rgba(255,255,255,0.1);
      color: #fff;
      border-color: rgba(255,255,255,0.15);
    }
    
    [data-bs-theme="dark"] input[type="datetime-local"]::-webkit-calendar-picker-indicator {
      filter: invert(1);
    }
  </style>
  
  <script>
    // Set default values for datetime inputs when empty
    document.addEventListener('DOMContentLoaded', function() {
      const startInput = document.getElementById('creationFilterStart');
      const endInput = document.getElementById('creationFilterEnd');
      
      // When applying filter with empty start date, default to beginning of current month
      if (startInput) {
        startInput.addEventListener('click', function() {
          if (!this.value) {
            const now = new Date();
            const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
            const formattedDate = firstDay.toISOString().slice(0, 16); // Format: YYYY-MM-DDTHH:MM
            this.value = formattedDate;
          }
        });
      }
      
      // When applying filter with empty end date, default to current datetime
      if (endInput) {
        endInput.addEventListener('click', function() {
          if (!this.value) {
            const now = new Date();
            const formattedDate = now.toISOString().slice(0, 16); // Format: YYYY-MM-DDTHH:MM
            this.value = formattedDate;
          }
        });
      }
    });
  </script>
</div>

<div class="dbviewer-sidebar-content">
  <% if @tables.any? %>
    <div class="list-group list-group-flush" id="tablesList">
      <% @tables.each do |table| %>
        <% 
          # Build table URL with creation filter params if they exist
          table_url_params = {}
          table_url_params[:creation_filter_start] = @creation_filter_start if @creation_filter_start.present?
          table_url_params[:creation_filter_end] = @creation_filter_end if @creation_filter_end.present?
        %>
        <%= link_to table_path(table[:name], table_url_params), title: table[:name],
                    class: "list-group-item list-group-item-action d-flex align-items-center #{'active' if current_table?(table[:name])}", 
                    tabindex: "0", 
                    data: { table_name: table[:name] },
                    onkeydown: "
                      if(event.key === 'ArrowDown') { 
                        event.preventDefault();
                        let next = this.nextElementSibling;
                        while(next && next.classList.contains('d-none')) {
                          next = next.nextElementSibling;
                        }
                        if(next) next.focus();
                      } else if(event.key === 'ArrowUp') { 
                        event.preventDefault();
                        let prev = this.previousElementSibling;
                        while(prev && prev.classList.contains('d-none')) {
                          prev = prev.previousElementSibling;
                        }
                        if(prev) prev.focus();
                        else document.getElementById('tableSearch')?.focus();
                      }" do %>
          <div class="text-truncate">
            <i class="bi bi-table me-2"></i>
            <%= format_table_name(table[:name]) %>
          </div>
          <div class="ms-auto flex-shrink-0">
            <span class="badge bg-info" title="Columns"><%= table[:columns_count] %></span>
          </div>
        <% end %>
      <% end %>
    </div>
  <% else %>
    <div class="list-group-item text-muted">
      <i class="bi bi-exclamation-circle me-2"></i>
      No tables found
    </div>
  <% end %>
</div>

<div class="px-3 py-2 text-muted small">
  <i class="bi bi-info-circle me-1"></i>
  <span id="table-count"><%= @tables.size %></span> tables found
</div>

<div class="px-3 py-1 text-muted small border-top">
  <i class="bi bi-gem me-1"></i>
  DBViewer v<%= Dbviewer::VERSION %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('tableSearch');
    const sidebarContent = document.querySelector('.dbviewer-sidebar-content');
    
    // Storage keys for persistence
    const STORAGE_KEYS = {
      searchFilter: 'dbviewer_sidebar_search_filter',
      scrollPosition: 'dbviewer_sidebar_scroll_position'
    };
    
    if (searchInput) {
      // Debounce function to limit how often the filter runs
      function debounce(func, wait) {
        let timeout;
        return function() {
          const context = this;
          const args = arguments;
          clearTimeout(timeout);
          timeout = setTimeout(function() {
            func.apply(context, args);
          }, wait);
        };
      }
      
      // Filter function
      const filterTables = debounce(function() {
        const query = searchInput.value.toLowerCase();
        const tableItems = document.querySelectorAll('#tablesList .list-group-item-action');
        let visibleCount = 0;
        
        // Save the current search filter to localStorage
        localStorage.setItem(STORAGE_KEYS.searchFilter, searchInput.value);
        
        tableItems.forEach(function(item) {
          // Get the table name from the title attribute for more accurate matching
          const tableName = (item.getAttribute('title') || item.textContent).trim().toLowerCase();
          
          // Also get the displayed text content for a broader match
          const displayedText = item.textContent.trim().toLowerCase();
          
          if (tableName.includes(query) || displayedText.includes(query)) {
            item.classList.remove('d-none');
            visibleCount++;
          } else {
            item.classList.add('d-none');
          }
        });
        
        // Update the tables count in the sidebar
        const tableCountElement = document.getElementById('table-count');
        if (tableCountElement) {
          tableCountElement.textContent = visibleCount;
        }
        
        // Show/hide no results message
        let noResultsEl = document.getElementById('dbviewer-no-filter-results');
        if (visibleCount === 0 && query !== '') {
          if (!noResultsEl) {
            noResultsEl = document.createElement('div');
            noResultsEl.id = 'dbviewer-no-filter-results';
            noResultsEl.className = 'list-group-item text-muted text-center py-3';
            noResultsEl.innerHTML = '<i class="bi bi-search me-1"></i> No tables match "<span class="fw-bold"></span>"';
            document.getElementById('tablesList').appendChild(noResultsEl);
          }
          noResultsEl.querySelector('.fw-bold').textContent = query;
          noResultsEl.style.display = 'block';
        } else if (noResultsEl) {
          noResultsEl.style.display = 'none';
        }
      }, 150); // Debounce for 150ms
      
      // Set up clear button first
      const clearButton = document.createElement('button');
      clearButton.type = 'button';
      clearButton.className = 'btn btn-sm btn-link position-absolute';
      clearButton.style.right = '15px';
      clearButton.style.top = '50%';
      clearButton.style.transform = 'translateY(-50%)';
      clearButton.style.display = 'none';
      clearButton.style.color = '#6c757d';
      clearButton.style.fontSize = '0.85rem';
      clearButton.style.padding = '0.25rem';
      clearButton.style.width = '1.5rem';
      clearButton.style.textAlign = 'center';
      clearButton.innerHTML = '<i class="bi bi-x-circle"></i>';
      clearButton.addEventListener('click', function() {
        searchInput.value = '';
        // Clear the saved filter from localStorage
        localStorage.removeItem(STORAGE_KEYS.searchFilter);
        // Call filter directly without debouncing for immediate feedback
        filterTables();
        this.style.display = 'none';
      });
      
      const filterContainer = document.querySelector('.dbviewer-table-filter-container');
      if (filterContainer) {
        filterContainer.style.position = 'relative';
        filterContainer.appendChild(clearButton);
        
        searchInput.addEventListener('input', function() {
          clearButton.style.display = this.value ? 'block' : 'none';
        });
      }
      
      // Restore saved search filter on page load and apply it immediately
      const savedFilter = localStorage.getItem(STORAGE_KEYS.searchFilter);
      if (savedFilter) {
        searchInput.value = savedFilter;
        // Show clear button immediately when filter is restored
        clearButton.style.display = 'block';
        // Apply filter immediately without debouncing to prevent blinking
        const query = savedFilter.toLowerCase();
        const tableItems = document.querySelectorAll('#tablesList .list-group-item-action');
        let visibleCount = 0;
        
        tableItems.forEach(function(item) {
          const tableName = (item.getAttribute('title') || item.textContent).trim().toLowerCase();
          const displayedText = item.textContent.trim().toLowerCase();
          
          if (tableName.includes(query) || displayedText.includes(query)) {
            item.classList.remove('d-none');
            visibleCount++;
          } else {
            item.classList.add('d-none');
          }
        });
        
        // Update the tables count immediately
        const tableCountElement = document.getElementById('table-count');
        if (tableCountElement) {
          tableCountElement.textContent = visibleCount;
        }
        
        // Handle no results message immediately
        let noResultsEl = document.getElementById('dbviewer-no-filter-results');
        if (visibleCount === 0 && query !== '') {
          if (!noResultsEl) {
            noResultsEl = document.createElement('div');
            noResultsEl.id = 'dbviewer-no-filter-results';
            noResultsEl.className = 'list-group-item text-muted text-center py-3';
            noResultsEl.innerHTML = '<i class="bi bi-search me-1"></i> No tables match "<span class="fw-bold"></span>"';
            document.getElementById('tablesList').appendChild(noResultsEl);
          }
          noResultsEl.querySelector('.fw-bold').textContent = query;
          noResultsEl.style.display = 'block';
        } else if (noResultsEl) {
          noResultsEl.style.display = 'none';
        }
      }
      
      // Restore saved scroll position on page load
      if (sidebarContent) {
        const savedScrollPosition = localStorage.getItem(STORAGE_KEYS.scrollPosition);
        if (savedScrollPosition) {
          // Use requestAnimationFrame to ensure DOM is fully rendered
          requestAnimationFrame(() => {
            sidebarContent.scrollTop = parseInt(savedScrollPosition, 10);
          });
        }
        
        // Save scroll position on scroll
        const saveScrollPosition = debounce(function() {
          localStorage.setItem(STORAGE_KEYS.scrollPosition, sidebarContent.scrollTop);
        }, 100);
        
        sidebarContent.addEventListener('scroll', saveScrollPosition);
      }
      
      // Set up event listeners for the search input
      searchInput.addEventListener('input', filterTables);
      searchInput.addEventListener('keyup', function(e) {
        filterTables();
        
        // Add keyboard navigation for the filtered list
        if (e.key === 'Enter' || e.key === 'ArrowDown') {
          e.preventDefault();
          // Focus the first visible table item (not having d-none class)
          const firstVisibleItem = document.querySelector('#tablesList .list-group-item-action:not(.d-none)');
          if (firstVisibleItem) {
            firstVisibleItem.focus();
            // Make sure the item is visible in the scrollable area
            firstVisibleItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          }
        }
      });
      searchInput.addEventListener('search', filterTables);  // For clearing via the "x" in some browsers
    }
  });
</script>
