<% content_for :title do %>
  Table: <%= @table_name %>
<% end %>

<% content_for :head do %>
  <!-- Mermaid.js library for ERD diagrams -->
  <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
  <!-- SVG-Pan-Zoom for interactive diagram navigation -->
  <script src="https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js"></script>
  <script>
    // Initialize mermaid when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Configure Mermaid for better ERD diagrams
      mermaid.initialize({
        startOnLoad: false,
        theme: document.documentElement.getAttribute('data-bs-theme') === 'dark' ? 'dark' : 'default',
        securityLevel: 'loose',
        er: {
          diagramPadding: 20,
          layoutDirection: 'TB',
          minEntityWidth: 100,
          minEntityHeight: 75,
          entityPadding: 15,
          stroke: 'gray',
          fill: document.documentElement.getAttribute('data-bs-theme') === 'dark' ? '#2D3748' : '#f5f5f5',
          fontSize: 14,
          useMaxWidth: true,
          wrapiength: 30
        }
      });
      console.log('Mermaid initialized with theme:', document.documentElement.getAttribute('data-bs-theme') === 'dark' ? 'dark' : 'default');
    });
  </script>
<% end %>

<% content_for :sidebar_active do %>active<% end %>

<% content_for :sidebar do %>
  <%= render 'dbviewer/shared/sidebar' %>
<% end %>

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1>Table: <%= @table_name %></h1>
  <div class="d-flex gap-2">
    <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#miniErdModal">
      <i class="bi bi-diagram-3 me-1"></i> View Relationships
    </button>
    <% if Dbviewer.configuration.enable_data_export %>
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#csvExportModal">
          <i class="bi bi-file-earmark-spreadsheet me-1"></i> Export CSV
        </button>
    <% end %>
    <%= link_to query_table_path(@table_name), class: "btn btn-primary" do %>
      <i class="bi bi-code-square me-1"></i> Run SQL Query
    <% end %>
  </div>
</div>

<% if Dbviewer.configuration.enable_data_export %>
  <!-- CSV Export Modal -->
  <div class="modal fade" id="csvExportModal" tabindex="-1" aria-labelledby="csvExportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="csvExportModalLabel">Export <strong><%= @table_name %></strong> to CSV</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <%= form_with url: export_csv_table_path(@table_name), method: :get, id: "csvExportForm" do |form| %>
            <div class="mb-3">
              <label for="limit" class="form-label">Maximum number of records</label>
              <input type="number" class="form-control" id="limit" name="limit" value="10000" min="1" max="100000">
              <div class="form-text">Limit the number of records to export. Large exports may take some time.</div>
            </div>
            
            <% if @total_count > 10000 %>
              <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                This table has <%= number_with_delimiter(@total_count) %> records. Exporting all records may be slow.
              </div>
            <% end %>
            
            <div class="mb-3 form-check">
              <input type="checkbox" class="form-check-input" id="includeHeaders" name="include_headers" checked>
              <label class="form-check-label" for="includeHeaders">Include column headers</label>
            </div>
          <% end %>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" form="csvExportForm" class="btn btn-success">
            <i class="bi bi-download me-1"></i> Export CSV
          </button>
        </div>
      </div>
    </div>
  </div>
<% end %>

<!-- Mini ERD Modal -->
<div class="modal fade" id="miniErdModal" tabindex="-1" aria-labelledby="miniErdModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content" id="miniErdModalContent">
      <!-- Content will be loaded dynamically -->
      <div class="modal-body text-center p-0">
        <div id="mini-erd-container" class="w-100 d-flex justify-content-center align-items-center" style="min-height: 450px; height: 100%;">
          <div class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading relationships diagram...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Records Section -->
<div class="dbviewer-card card mb-4">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0"><i class="bi bi-table me-2"></i>Records</h5>
    <div class="d-flex align-items-center">
      <div class="me-3">
        <label for="per-page-select" class="me-2">Per page:</label>
        <select id="per-page-select" class="form-select form-select-sm" onchange="window.location.href='<%= table_path(@table_name) %>?per_page=' + this.value + '&page=1&order_by=<%= @order_by %>&order_direction=<%= @order_direction %><%= @column_filters.reject { |_, v| v.blank? }.any? ? "&" + @column_filters.reject { |_, v| v.blank? }.map { |k, v| "column_filters[#{k}]=#{CGI.escape(v.to_s)}" }.join("&") : "" %>'">
          <% Dbviewer::TablesController.per_page_options.each do |option| %>
            <option value="<%= option %>" <%= 'selected' if @per_page == option %>><%= option %></option>
          <% end %>
        </select>
      </div>
      <span class="badge bg-secondary">Total: <%= @total_count %> records</span>
      <% active_filters = @column_filters.reject { |_, v| v.blank? }.size %>
      <% if active_filters > 0 %>
        <span class="badge bg-info ms-2" title="Active filters"><i class="bi bi-funnel-fill me-1"></i><%= active_filters %></span>
      <% end %>
    </div>
  </div>
    <div class="card-body p-0">
      <div class="table-responsive dbviewer-scrollable">
        <%= form_with(url: table_path(@table_name), method: :get, local: true, id: "column-filters-form", class: "mb-0") do |form| %>
          <% # Hidden fields to preserve current parameters %>
          <%= form.hidden_field :per_page, value: @per_page %>
          <%= form.hidden_field :order_by, value: @order_by %>
          <%= form.hidden_field :order_direction, value: @order_direction %>
          <%= form.hidden_field :page, value: 1 %> <!-- Reset to first page on filter -->
          
          <table class="table table-bordered table-striped rounded-none">
              <thead class="dbviewer-table-header">
                <tr>
                  <% if @records && @records.columns %>
                    <% @records.columns.each do |column_name| %>
                      <th class="pe-4">
                        <%= column_name %>
                      </th>
                    <% end %>
                  <% else %>
                    <th>No columns available</th>
                  <% end %>
                </tr>
                <tr class="column-filters">
                  <% if @records && @records.columns %>
                    <% @records.columns.each do |column_name| %>
                      <th class="p-0">
                        <% 
                          # Find column info to detect the type
                          column_info = @columns.find { |c| c[:name].to_s == column_name.to_s } if @columns
                          column_type = column_info ? column_info[:type].to_s.downcase : nil
                        %>

                        <% if column_type && column_type =~ /datetime/ %>
                          <%= form.datetime_local_field "column_filters[#{column_name}]", 
                              value: @column_filters[column_name], 
                              class: "form-control form-control-sm column-filter rounded-0",
                              data: { column: column_name } %>
                        <% elsif column_type && column_type =~ /^date$/ %>
                          <%= form.date_field "column_filters[#{column_name}]", 
                              value: @column_filters[column_name], 
                              class: "form-control form-control-sm column-filter rounded-0",
                              data: { column: column_name } %>
                        <% elsif column_type && column_type =~ /^time$/ %>
                          <%= form.time_field "column_filters[#{column_name}]", 
                              value: @column_filters[column_name], 
                              class: "form-control form-control-sm column-filter rounded-0",
                              data: { column: column_name } %>
                        <% else %>
                          <%= form.text_field "column_filters[#{column_name}]", 
                              value: @column_filters[column_name], 
                              placeholder: "",
                              class: "form-control form-control-sm column-filter rounded-0",
                              data: { column: column_name } %>
                        <% end %>
                      </th>
                    <% end %>
                  <% else %>
                    <th></th>
                  <% end %>
                </tr>
              </thead>
              <tbody>
                <% if @records.nil? || @records.rows.nil? || @records.empty? %>
                  <tr>
                    <td colspan="100%" class="text-center">No records found or table is empty.</td>
                  </tr>
                <% end %>
                <% if @records && @records.rows %>
                  <% @records.rows.each do |row| %>
                    <tr>
                        <% row.each_with_index do |cell, cell_index| %>
                          <% 
                            column_name = @records.columns[cell_index]
                            cell_value = format_cell_value(cell)
                            
                            # Check if this column is a foreign key
                            foreign_key = @metadata && @metadata[:foreign_keys] ? 
                                          @metadata[:foreign_keys].find { |fk| fk[:column] == column_name } : 
                                          nil
                          %>
                          <% if foreign_key && !cell.nil? %>
                            <td title="<%= cell_value %> (Click to view referenced record)">
                              <%= link_to cell_value, 
                                  table_path(foreign_key[:to_table], 
                                  column_filters: { foreign_key[:primary_key] => cell }), 
                                  class: "text-decoration-none foreign-key-link" %>
                              <i class="bi bi-link-45deg text-muted small"></i>
                            </td>
                          <% else %>
                            <td title="<%= cell_value %>"><%= cell_value %></td>
                          <% end %>
                      <% end %>
                    </tr>
                  <% end %>
                <% end %>
            </tbody>
        </table>
        <% end %> <!-- End of form_with -->
      </div>
      
      <% if @total_pages && @total_pages > 1 %>
        <nav aria-label="Page navigation">
          <ul class="pagination justify-content-center">
            <li class="page-item <%= 'disabled' if @current_page == 1 %>">
              <%= link_to '«', table_path(@table_name, page: [@current_page - 1, 1].max, order_by: @order_by, order_direction: @order_direction, per_page: @per_page, column_filters: @column_filters), class: 'page-link' %>
            </li>
            
            <% start_page = [1, @current_page - 2].max %>
            <% end_page = [start_page + 4, @total_pages].min %>
            <% start_page = [1, end_page - 4].max %>
            
            <% (start_page..end_page).each do |page_num| %>
              <li class="page-item <%= 'active' if page_num == @current_page %>">
                <%= link_to page_num, table_path(@table_name, page: page_num, order_by: @order_by, order_direction: @order_direction, per_page: @per_page, column_filters: @column_filters), class: 'page-link' %>
              </li>
            <% end %>
            
            <li class="page-item <%= 'disabled' if @current_page == @total_pages %>">
              <%= link_to '»', table_path(@table_name, page: [@current_page + 1, @total_pages].min, order_by: @order_by, order_direction: @order_direction, per_page: @per_page, column_filters: @column_filters), class: 'page-link' %>
            </li>
          </ul>
        </nav>
      <% end %>
    </div>
  </div>
</div>

<!-- Two-column layout for Timeline and Structure -->
<div class="row two-column-layout">
  <!-- Timeline Column -->
  <div class="col-md-6 mb-4">
    <% if @timestamp_data.present? %>
      <div class="dbviewer-card card h-100">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0"><i class="bi bi-graph-up me-2"></i>Record Creation Timeline</h5>
          <div>
            <div class="btn-group btn-group-sm" role="group" aria-label="Time grouping">
              <%= link_to "Hourly", table_path(@table_name, time_group: "hourly", page: @current_page, order_by: @order_by, order_direction: @order_direction, per_page: @per_page), class: "btn btn-outline-primary #{@time_grouping == 'hourly' ? 'active' : ''}" %>
              <%= link_to "Daily", table_path(@table_name, time_group: "daily", page: @current_page, order_by: @order_by, order_direction: @order_direction, per_page: @per_page), class: "btn btn-outline-primary #{@time_grouping == 'daily' ? 'active' : ''}" %>
              <%= link_to "Weekly", table_path(@table_name, time_group: "weekly", page: @current_page, order_by: @order_by, order_direction: @order_direction, per_page: @per_page), class: "btn btn-outline-primary #{@time_grouping == 'weekly' ? 'active' : ''}" %>
            </div>
          </div>
        </div>
        <div class="card-body">
          <div class="chart-container">
            <canvas id="timestampChart"></canvas>
          </div>
          <div class="mt-3 text-center">
            <small class="text-muted">
              <i class="bi bi-info-circle"></i> 
              Timeline shows <%= @time_grouping %> record creation patterns based on <code>created_at</code> column.
            </small>
          </div>
        </div>
      </div>
    <% else %>
      <div class="dbviewer-card card h-100">
        <div class="card-header">
          <h5 class="mb-0"><i class="bi bi-info-circle me-2"></i>Creation Timeline</h5>
        </div>
        <div class="card-body d-flex justify-content-center align-items-center text-center text-muted">
          <div>
            <i class="bi bi-calendar-x display-4 mb-3"></i>
            <p>No creation timestamp data available for this table.</p>
            <small>Timeline visualization is only available for tables with a <code>created_at</code> column.</small>
          </div>
        </div>
      </div>
    <% end %>
  </div>
  
  <!-- Structure Column -->
  <div class="col-md-6 mb-4">
    <div class="dbviewer-card card h-100">
      <div class="card-header">
        <h5 class="mb-0"><i class="bi bi-diagram-3 me-2"></i>Table Structure</h5>
      </div>
      <div class="card-body structure-container">
        <%= render 'table_structure' %>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Column filter functionality
    const columnFilters = document.querySelectorAll('.column-filter');
    const filterForm = document.getElementById('column-filters-form');
    
    // Add debounce function to reduce form submissions
    function debounce(func, wait) {
      let timeout;
      return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(function() {
          func.apply(context, args);
        }, wait);
      };
    }
    
    // Function to submit the form
    const submitForm = debounce(function() {
      filterForm.submit();
    }, 500);
    
    // Add event listeners to all filter inputs
    columnFilters.forEach(function(filter) {
      // For text fields use input event
      filter.addEventListener('input', submitForm);
      
      // For date/time fields also use change event since they have calendar/time pickers
      if (filter.type === 'date' || filter.type === 'datetime-local' || filter.type === 'time') {
        filter.addEventListener('change', submitForm);
      }
    });
    
    // Add clear button functionality if there are any filters applied
    const hasActiveFilters = Array.from(columnFilters).some(input => input.value);
    
    if (hasActiveFilters) {
      // Add a clear filters button
      const paginationContainer = document.querySelector('nav[aria-label="Page navigation"]') || 
                                   document.querySelector('.table-responsive');
      
      if (paginationContainer) {
        const clearButton = document.createElement('div');
        clearButton.className = 'text-center mt-3';
        clearButton.innerHTML = '<button type="button" class="btn btn-sm btn-outline-secondary" id="clear-filters">' +
                               '<i class="bi bi-x-circle me-1"></i>Clear All Filters</button>';
        
        paginationContainer.insertAdjacentHTML('afterend', clearButton.outerHTML);
        
        document.getElementById('clear-filters').addEventListener('click', function() {
          columnFilters.forEach(filter => filter.value = '');
          submitForm();
        });
      }
    }
    
    // Load Mini ERD when modal is opened
    const miniErdModal = document.getElementById('miniErdModal');
    if (miniErdModal) {
      let isModalLoaded = false;
      let erdData = null;
      
      miniErdModal.addEventListener('show.bs.modal', function(event) {
        const modalContent = document.getElementById('miniErdModalContent');
        
        // Set loading state
        modalContent.innerHTML = `
          <div class="modal-header">
            <h5 class="modal-title">Relationships for <%= @table_name %></h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body p-0">
            <div id="mini-erd-container" class="w-100 d-flex justify-content-center align-items-center" style="min-height: 450px; height: 100%;">
              <div class="text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading relationships diagram...</p>
                <small class="text-muted">This may take a moment for tables with many relationships</small>
              </div>
            </div>
          </div>
        `;
        
        // Always fetch fresh data when modal is opened
        fetchErdData();
      });
      
      // Function to fetch ERD data
      function fetchErdData() {
        // Add cache-busting timestamp to prevent browser caching
        const cacheBuster = new Date().getTime();
        const fetchUrl = `<%= dbviewer.mini_erd_table_path(@table_name, format: :json) %>?_=${cacheBuster}`;
        
        // Log loading message
        console.log('Loading fresh Mini ERD data from:', fetchUrl);
        
        // Set a timeout to handle long-running requests
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Request timeout after 10 seconds')), 10000)
        );
        
        // Race the fetch against a timeout
        Promise.race([
          fetch(fetchUrl),
          timeoutPromise
        ])
          .then(response => {
            if (!response.ok) {
              throw new Error(`Server returned ${response.status} ${response.statusText}`);
            }
            return response.json(); // Parse as JSON instead of text
          })
          .then(data => {
            isModalLoaded = true;
            erdData = data; // Store the data
            renderMiniErd(data);
          })
          .catch(error => {
            console.error('Error loading mini ERD:', error);
            showErdError(error);
          });
      }
      
      // Function to show error modal
      function showErdError(error) {
        const modalContent = document.getElementById('miniErdModalContent');
        modalContent.innerHTML = `
          <div class="modal-header">
            <h5 class="modal-title">Relationships for <%= @table_name %></h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body p-0">
            <div class="alert alert-danger m-3">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              <strong>Error loading relationship diagram</strong>
              <p class="mt-2 mb-0">${error.message}</p>
            </div>
            <div class="m-3">
              <p><strong>Debug Information:</strong></p>
              <code>GET <%= dbviewer.mini_erd_table_path(@table_name, format: :json) %></code> failed
              <p class="mt-3">
                <button class="btn btn-sm btn-primary" onclick="retryLoadingMiniERD()">
                  <i class="bi bi-arrow-clockwise me-1"></i> Retry
                </button>
              </p>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        `;
      }
      
      // Function to render the ERD with Mermaid
      function renderMiniErd(data) {
        const modalContent = document.getElementById('miniErdModalContent');
        
        // Set up the modal content with container for ERD
        modalContent.innerHTML = `
          <div class="modal-header">
            <h5 class="modal-title">Relationships for <%= @table_name %></h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body p-0"> <!-- Removed padding for full width -->
            <div id="mini-erd-container" class="w-100" style="min-height: 450px; height: 100%;"> <!-- Increased height -->
              <div id="mini-erd-loading" class="d-flex justify-content-center align-items-center" style="height: 100%; min-height: 450px;">
                <div class="text-center">
                  <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <p>Generating Relationships Diagram...</p>
                </div>
              </div>
              <div id="mini-erd-error" class="alert alert-danger m-3 d-none">
                <h5>Error generating diagram</h5>
                <p id="mini-erd-error-message">There was an error rendering the relationships diagram.</p>
                <pre id="mini-erd-error-details" class="bg-light p-2 small mt-2"></pre>
              </div>
            </div>
            <div id="debug-data" class="d-none m-3 border-top pt-3">
              <details>
                <summary>Debug Information</summary>
                <div class="alert alert-info small">
                  <pre id="erd-data-debug" style="max-height: 100px; overflow: auto;">${JSON.stringify(data, null, 2)}</pre>
                </div>
              </details>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <a href="<%= dbviewer.entity_relationship_diagrams_path %>" class="btn btn-primary">View Full ERD</a>
          </div>
        `;
        
        try {
          const tables = data.tables || [];
          const relationships = data.relationships || [];
          
          // Validate data before proceeding
          if (!Array.isArray(tables) || !Array.isArray(relationships)) {
            showDiagramError('Invalid data format', 'The relationship data is not in the expected format.');
            console.error('Invalid data format received:', data);
            return;
          }

          console.log(`Found ${tables.length} tables and ${relationships.length} relationships`);
          
          // Create the ER diagram definition in Mermaid syntax
          let mermaidDefinition = 'erDiagram\n';
          
          // Add tables to the diagram - ensure we have at least one table
          if (tables.length === 0) {
            mermaidDefinition += `  <%= @table_name.gsub(/[^\w]/, '_') %> {\n`;
            mermaidDefinition += `    string id PK\n`;
            mermaidDefinition += `  }\n`;
          } else {
            tables.forEach(function(table) {
              const tableName = table.name;
              
              if (!tableName) {
                console.warn('Table with no name found:', table);
                return; // Skip this table
              }
              
              // Clean table name for mermaid (remove special characters)
              const cleanTableName = tableName.replace(/[^\w]/g, '_');
              
              // Make the current table stand out with a different visualization
              if (tableName === '<%= @table_name %>') {
                mermaidDefinition += `  ${cleanTableName} {\n`;
                mermaidDefinition += `    string id PK\n`;
                mermaidDefinition += `  }\n`;
              } else {
                mermaidDefinition += `  ${cleanTableName} {\n`;
                mermaidDefinition += `    string id\n`;
                mermaidDefinition += `  }\n`;
              }
            });
          }
          
          // Add relationships
          if (relationships && relationships.length > 0) {
            relationships.forEach(function(rel) {
              try {
                // Ensure all required properties exist
                if (!rel.from_table || !rel.to_table) {
                  console.error('Missing table in relationship:', rel);
                  return; // Skip this relationship
                }
                
                // Clean up table names for mermaid (remove special characters)
                const fromTable = rel.from_table.replace(/[^\w]/g, '_');
                const toTable = rel.to_table.replace(/[^\w]/g, '_');
                const relationLabel = rel.from_column || '';
                
                // Customize the display based on direction
                mermaidDefinition += `  ${fromTable} }|--|| ${toTable} : "${relationLabel}"\n`;
              } catch (err) {
                console.error('Error processing relationship:', err, rel);
              }
            });
          } else {
            // Add a note if no relationships are found
            mermaidDefinition += '  %% No relationships found for this table\n';
          }
          
          // Log the generated mermaid definition for debugging
          console.log('Mermaid Definition:', mermaidDefinition);
          
          // Hide the loading indicator first since render might take time
          document.getElementById('mini-erd-loading').style.display = 'none';
          
          // Render the diagram with Mermaid
          mermaid.render('mini-erd-graph', mermaidDefinition)
            .then(function(result) {
              console.log('Mermaid rendering successful');
              
              // Get the container
              const container = document.getElementById('mini-erd-container');
              
              // Insert the rendered SVG
              container.innerHTML = result.svg;
              
              // Style the SVG element for better fit
              const svgElement = container.querySelector('svg');
              if (svgElement) {
                // Set size attributes for the SVG
                svgElement.setAttribute('width', '100%');
                svgElement.setAttribute('height', '100%');
                svgElement.style.minHeight = '450px';
                svgElement.style.width = '100%';
                svgElement.style.height = '100%';
                
                // Set viewBox if not present to enable proper scaling
                if (!svgElement.getAttribute('viewBox')) {
                  const width = svgElement.getAttribute('width') || '100%';
                  const height = svgElement.getAttribute('height') || '100%';
                  svgElement.setAttribute('viewBox', `0 0 ${parseInt(width) || 1000} ${parseInt(height) || 800}`);
                }
              }
              
              // Apply SVG-Pan-Zoom to make the diagram interactive
              try {
                const svgElement = container.querySelector('svg');
                if (svgElement && typeof svgPanZoom !== 'undefined') {
                  // Make SVG take the full container width
                  svgElement.setAttribute('width', '100%');
                  svgElement.setAttribute('height', '100%');
                  
                  // Initialize SVG Pan-Zoom
                  const panZoomInstance = svgPanZoom(svgElement, {
                    zoomEnabled: true,
                    controlIconsEnabled: true,
                    fit: true,
                    center: true,
                    minZoom: 0.5,
                    maxZoom: 2.5
                  });
                  
                  // Store the panZoom instance for resize handling
                  container.panZoomInstance = panZoomInstance;
                  
                  // Setup resize observer to maintain full size
                  const resizeObserver = new ResizeObserver(() => {
                    if (container.panZoomInstance) {
                      // Reset zoom and center when container is resized
                      container.panZoomInstance.resize();
                      container.panZoomInstance.fit();
                      container.panZoomInstance.center();
                    }
                  });
                  
                  // Observe the container for size changes
                  resizeObserver.observe(container);
                  
                  // Also handle manual resize on modal resize
                  miniErdModal.addEventListener('resize.bs.modal', function() {
                    if (container.panZoomInstance) {
                      setTimeout(() => {
                        container.panZoomInstance.resize();
                        container.panZoomInstance.fit();
                        container.panZoomInstance.center();
                      }, 100);
                    }
                  });
                }
              } catch (e) {
                console.warn('Failed to initialize svg-pan-zoom:', e);
                // Not critical, continue without pan-zoom
              }
              
              // Add highlighting for the current table
              setTimeout(function() {
                try {
                  const cleanTableName = '<%= @table_name %>'.replace(/[^\w]/g, '_');
                  const currentTableElement = container.querySelector(`[id*="${cleanTableName}"]`);
                  if (currentTableElement) {
                    const rect = currentTableElement.querySelector('rect');
                    if (rect) {
                      // Highlight the current table
                      rect.setAttribute('fill', document.documentElement.getAttribute('data-bs-theme') === 'dark' ? '#2c3034' : '#e2f0ff');
                      rect.setAttribute('stroke', document.documentElement.getAttribute('data-bs-theme') === 'dark' ? '#6ea8fe' : '#0d6efd');
                      rect.setAttribute('stroke-width', '2');
                    }
                  }
                } catch (e) {
                  console.error('Error highlighting current table:', e);
                }
              }, 100);
            })
            .catch(function(error) {
              console.error('Error rendering mini ERD:', error);
              showDiagramError(
                'Error rendering diagram', 
                'There was an error rendering the relationships diagram.',
                error.message || 'Unknown error'
              );
              
              // Show debug data when there's an error
              document.getElementById('debug-data').classList.remove('d-none');
            });
        } catch (error) {
          console.error('Exception in renderMiniErd function:', error);
          showDiagramError(
            'Exception generating diagram', 
            'There was an exception processing the relationships diagram.',
            error.message || 'Unknown error'
          );
          
          // Show debug data when there's an error
          document.getElementById('debug-data').classList.remove('d-none');
        }
      }
      
      // Function to show diagram error
      function showDiagramError(title, message, details = '') {
        const errorContainer = document.getElementById('mini-erd-error');
        const errorMessage = document.getElementById('mini-erd-error-message');
        const errorDetails = document.getElementById('mini-erd-error-details');
        const loadingIndicator = document.getElementById('mini-erd-loading');
        
        if (loadingIndicator) {
          loadingIndicator.style.display = 'none';
        }
        
        if (errorContainer && errorMessage) {
          // Set error message
          errorMessage.textContent = message;
          
          // Set error details if provided
          if (details && errorDetails) {
            errorDetails.textContent = details;
            errorDetails.classList.remove('d-none');
          } else if (errorDetails) {
            errorDetails.classList.add('d-none');
          }
          
          // Show the error container
          errorContainer.classList.remove('d-none');
        }
      }
      
      // Handle modal shown event - adjust size after the modal is fully visible
      miniErdModal.addEventListener('shown.bs.modal', function(event) {
        // After modal is fully shown, resize the diagram to fit
        const container = document.getElementById('mini-erd-container');
        if (container && container.panZoomInstance) {
          setTimeout(() => {
            container.panZoomInstance.resize();
            container.panZoomInstance.fit();
            container.panZoomInstance.center();
          }, 200); // Small delay to ensure modal is fully transitioned
        }
      });
      
      // Handle modal close to reset state for future opens
      miniErdModal.addEventListener('hidden.bs.modal', function(event) {
        // Reset flags and cached data to ensure fresh fetch on next open
        isModalLoaded = false;
        erdData = null;
        console.log('Modal closed, diagram data will be refetched on next open');
      });
    }
    
    // Function to retry loading the Mini ERD
    function retryLoadingMiniERD() {
      console.log('Retrying loading of mini ERD');
      const modalContent = document.getElementById('miniErdModalContent');
      
      // Set loading state again
      modalContent.innerHTML = `
        <div class="modal-header">
          <h5 class="modal-title">Relationships for <%= @table_name %></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body p-0">
          <div id="mini-erd-container" class="w-100 d-flex justify-content-center align-items-center" style="min-height: 450px; height: 100%;">
            <div class="text-center">
              <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p>Retrying to load relationships diagram...</p>
            </div>
          </div>
        </div>
      `;
      
      // Reset state to ensure fresh fetch
      isModalLoaded = false;
      erdData = null;
      
      // Retry fetching data
      fetchErdData();
    }
  });
</script>

<style>
  /* Column filter styling */
  .column-filters td {
    padding: 0.5rem;
    background-color: var(--bs-tertiary-bg, #f8f9fa);
  }
  
  .column-filter {
    width: 100%;
    border: 1px solid rgba(0,0,0,0.1);
    padding: 0.3rem 0.5rem;
    font-size: 0.85rem;
  }
  
  /* Ensure consistent sizing for date/time inputs */
  input[type="date"].column-filter,
  input[type="datetime-local"].column-filter,
  input[type="time"].column-filter {
    padding: 0.2rem 0.5rem;
  }
  
  [data-bs-theme="dark"] .column-filters td {
    background-color: rgba(255,255,255,0.05);
  }
  
  [data-bs-theme="dark"] .column-filter {
    background-color: rgba(255,255,255,0.1);
    color: rgba(255,255,255,0.9);
    border-color: rgba(255,255,255,0.15);
  }
  
  /* Special styling for date/time inputs in dark mode */
  [data-bs-theme="dark"] input[type="datetime-local"].column-filter::-webkit-calendar-picker-indicator,
  [data-bs-theme="dark"] input[type="date"].column-filter::-webkit-calendar-picker-indicator,
  [data-bs-theme="dark"] input[type="time"].column-filter::-webkit-calendar-picker-indicator {
    filter: invert(0.8);
  }
  
  /* Mini ERD modal styling */
  #miniErdModal .modal-dialog {
    max-width: 90%;
    max-height: 90vh;
    height: 90vh;
  }
  
  #miniErdModal .modal-content {
    height: 100%;
  }
  
  #miniErdModal .modal-body {
    height: calc(100% - 130px); /* Account for header and footer */
    overflow: hidden; /* Prevent scrollbars within the modal body */
  }
  
  #miniErdModal #mini-erd-container {
    height: 100%;
    width: 100%;
  }
  
  #miniErdModal #mini-erd-container svg {
    width: 100%;
    height: 100%;
    max-height: unset;
  }
  
  /* Foreign key link styling */
  .foreign-key-link {
    color: var(--bs-primary);
    position: relative;
  }
  
  .foreign-key-link:hover {
    text-decoration: underline !important;
  }
  
  .foreign-key-link + .bi-link-45deg {
    font-size: 0.75rem;
    margin-left: 0.25rem;
    position: relative;
    top: -1px;
  }
</style>

<% if @timestamp_data.present? %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const timeGrouping = '<%= @time_grouping %>';
    const chartData = <%= raw @timestamp_data.to_json %>;
    
    // Reverse the data so it's chronological
    const labels = chartData.map(item => item.label).reverse();
    const values = chartData.map(item => item.value).reverse();
    
    // Chart colors based on time grouping
    let chartColor;
    let chartTitle;
    
    switch(timeGrouping) {
      case 'hourly':
        chartColor = 'rgba(75, 192, 192, 0.7)';
        chartTitle = 'Hourly Record Creation';
        break;
      case 'weekly':
        chartColor = 'rgba(153, 102, 255, 0.7)';
        chartTitle = 'Weekly Record Creation';
        break;
      default:
        chartColor = 'rgba(54, 162, 235, 0.7)';
        chartTitle = 'Daily Record Creation';
    }
    
    const ctx = document.getElementById('timestampChart').getContext('2d');
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Records Created',
          data: values,
          backgroundColor: chartColor,
          borderColor: chartColor.replace('0.7', '1.0'),
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          title: {
            display: true,
            text: chartTitle,
            font: {
              size: 16
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Number of Records'
            },
            ticks: {
              precision: 0
            }
          },
          x: {
            title: {
              display: true,
              text: timeGrouping.charAt(0).toUpperCase() + timeGrouping.slice(1)
            }
          }
        }
      }
    });
  });
</script>
<% end %>
