<% content_for :title do %>
  Table: <%= @table_name %>
<% end %>

<% content_for :head do %>
  <!-- Mermaid.js library for ERD diagrams -->
  <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
  <!-- SVG-Pan-Zoom for interactive diagram navigation -->
  <script src="https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js"></script>
  <style>
    /* Column sorting styles */
    .sortable-column {
      cursor: pointer;
      position: relative;
      transition: background-color 0.2s ease;
      background-color: inherit;
    }
    
    .sortable-column:hover {
      background-color: #f5f5f5;
    }
    
    .sortable-column.sorted {
      background-color: #f0f0f0;
    }
    
    .sortable-column .column-sort-link {
      display: flex;
      align-items: center;
      justify-content: space-between;
      width: 100%;
      height: 100%;
      padding: 4px 0;
    }
    
    .sortable-column .column-name {
      flex: 1;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    .sortable-column .sort-icon-container {
      flex: 0 0 auto;
      width: 20px;
      text-align: center;
      margin-left: 4px;
    }
    
    .sortable-column .sort-icon {
      font-size: 0.8em;
      opacity: 0.7;
      transition: opacity 0.2s ease, color 0.2s ease;
    }
    
    .sortable-column:hover .sort-icon.invisible {
      visibility: visible !important;
      opacity: 0.3;
    }

    /* Fix scrolling issues with sticky header */
    .dbviewer-table-header {
      position: sticky !important;
      top: 0;
      z-index: 10;
      background-color: var(--bs-table-striped-bg, #f2f2f2) !important;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.075);
    }
    
    [data-bs-theme="dark"] .dbviewer-table-header {
      background-color: var(--bs-dark-bg-subtle, #343a40) !important;
    }
    
  /* Ensure proper layering for sticky elements */
  .dbviewer-table-header th {
    position: sticky;
    top: 0;
    z-index: 20;
  }
  
  /* Increase z-index for the intersection point of sticky header and sticky column */
  .dbviewer-table-header th.action-column {
    z-index: 40 !important; 
    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
  }
    
    /* Ensure thead has higher z-index than tbody */
    thead tr th.action-column {
      z-index: 40 !important;
    }
    
    tbody tr td.action-column {
      z-index: 30 !important;
    }
    
    /* Improve mobile display for sort headers */
    @media (max-width: 767.98px) {
      .sortable-column .column-sort-link {
        flex-direction: row;
        align-items: center;
      }
      
      .sortable-column .sort-icon-container {
        width: 16px;
      }
    }
    
    /* Dark mode compatibility */
    [data-bs-theme="dark"] .sortable-column:hover {
      background-color: rgba(255, 255, 255, 0.05);
    }
    
    [data-bs-theme="dark"] .sortable-column.sorted {
      background-color: rgba(255, 255, 255, 0.1);
    }
    
    /* Column filter styling */
    .column-filters td {
      padding: 0.5rem;
      background-color: var(--bs-tertiary-bg, #f8f9fa);
    }
    
    /* Action column styling */
    .action-column {
      width: 60px;
      min-width: 60px; /* Ensure minimum width */
      white-space: nowrap;
      position: sticky;
      left: 0;
      z-index: 15;
      background-color: var(--bs-table-striped-bg, #f2f2f2);
      box-shadow: 2px 0 4px rgba(0, 0, 0, 0.05);
    }
    
    /* Ensure proper background color for actions column in dark mode */
    [data-bs-theme="dark"] .action-column {
      background-color: var(--bs-dark-bg-subtle, #343a40);
    }

    /* Maintain zebra striping with sticky action column */
    .table-striped > tbody > tr:nth-of-type(odd) > .action-column {
      background-color: var(--bs-table-striped-bg, #f8f9fa);
    }

    [data-bs-theme="dark"] .table-striped > tbody > tr:nth-of-type(odd) > .action-column {
      background-color: var(--bs-dark-bg-subtle, #343a40);
    }
    
    .view-record-btn {
      padding: 0.1rem 0.4rem;
      width: 32px;
    }
    
    .view-record-btn:hover {
      opacity: 0.85;
      transform: translateY(-1px);
    }
    
  /* Make action column header sticky as well */
  .action-column-header {
    position: sticky;
    left: 0;
    z-index: 40 !important; /* Even higher z-index to stay on top of everything */
    background-color: var(--bs-tertiary-bg, #f8f9fa) !important;
    border-right: 1px solid var(--bs-border-color) !important; /* Added border for visual separation */
  }
  
  [data-bs-theme="dark"] .action-column-header {
    background-color: var(--bs-dark-bg-subtle, #343a40) !important;
  }
    
    [data-bs-theme="dark"] .action-column-header {
      background-color: var(--bs-dark-bg-subtle, #343a40) !important;
    }
    
  /* Make action column filter cell sticky as well */
  .action-column-filter {
    position: sticky;
    left: 0;
    z-index: 40 !important;
    background-color: var(--bs-tertiary-bg, #f8f9fa) !important;
  }
  
  [data-bs-theme="dark"] .action-column-filter {
    background-color: var(--bs-tertiary-bg, #2b3035) !important;
  }
    
    /* Fix action column for entire table */
    .action-column {
      border-right: 1px solid var(--bs-border-color);
    }
    
    /* Ensure equal padding for all cells */
    .action-column-header, .action-column-filter {
      padding-left: 8px !important;
      padding-right: 8px !important;
    }
    
    /* Relationship section styles */
    #relationshipsSection {
      border-top: 1px solid var(--bs-border-color, #dee2e6);
      margin-top: 1.5rem;
      padding-top: 1.5rem;
    }
    
    #relationshipsSection h6 {
      color: var(--bs-primary, #0d6efd);
      font-weight: 600;
      border-bottom: 2px solid var(--bs-primary, #0d6efd);
      padding-bottom: 0.5rem;
      margin-bottom: 1rem;
    }
    
    .relationship-section h6 {
      font-size: 0.95rem;
      margin-bottom: 0.75rem;
      padding: 0.5rem 0.75rem;
      background: linear-gradient(135deg, var(--bs-primary-bg-subtle, #cfe2ff), transparent);
      border-left: 3px solid var(--bs-primary, #0d6efd);
      border-radius: 0.25rem;
    }
    
    .relationship-section .table {
      margin-bottom: 0;
      border: 1px solid var(--bs-border-color, #dee2e6);
    }
    
    .relationship-section .table th {
      background-color: var(--bs-light, #f8f9fa);
      font-weight: 600;
      font-size: 0.875rem;
      border-bottom: 2px solid var(--bs-border-color, #dee2e6);
    }
    
    .relationship-section .table td {
      vertical-align: middle;
      font-size: 0.875rem;
    }
    
    .relationship-section .btn {
      font-size: 0.8rem;
      padding: 0.375rem 0.75rem;
    }
    
    .relationship-section .btn-outline-primary:hover {
      transform: translateX(2px);
      transition: transform 0.2s ease;
    }
    
    .relationship-section .btn-outline-success:hover {
      transform: translateX(2px);
      transition: transform 0.2s ease;
    }
    
    /* Dark mode relationship styles */
    [data-bs-theme="dark"] #relationshipsSection {
      border-top-color: var(--bs-border-color, #495057);
    }
    
    [data-bs-theme="dark"] .relationship-section h6 {
      background: linear-gradient(135deg, var(--bs-primary-bg-subtle, #031633), transparent);
    }
    
    [data-bs-theme="dark"] .relationship-section .table th {
      background-color: var(--bs-dark-bg-subtle, #343a40);
      color: var(--bs-light, #f8f9fa);
    }
    
    [data-bs-theme="dark"] .relationship-section .table {
      border-color: var(--bs-border-color, #495057);
    }
    
    /* Responsive relationship tables */
    @media (max-width: 767.98px) {
      .relationship-section .table th,
      .relationship-section .table td {
        font-size: 0.8rem;
        padding: 0.5rem 0.25rem;
      }
      
      .relationship-section .btn {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
      }
    }
  </style>
  
  <script>
    // Initialize mermaid when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Configure Mermaid for better ERD diagrams
      mermaid.initialize({
        startOnLoad: false,
        theme: document.documentElement.getAttribute('data-bs-theme') === 'dark' ? 'dark' : 'default',
        securityLevel: 'loose',
        er: {
          diagramPadding: 20,
          layoutDirection: 'TB',
          minEntityWidth: 100,
          minEntityHeight: 75,
          entityPadding: 15,
          stroke: 'gray',
          fill: document.documentElement.getAttribute('data-bs-theme') === 'dark' ? '#2D3748' : '#f5f5f5',
          fontSize: 14,
          useMaxWidth: true,
          wrapiength: 30
        }
      });
      console.log('Mermaid initialized with theme:', document.documentElement.getAttribute('data-bs-theme') === 'dark' ? 'dark' : 'default');
    });
  </script>
<% end %>

<% content_for :sidebar_active do %>active<% end %>

<div class="d-flex justify-content-between align-items-center mb-4">
  <div class="d-flex justify-content-between align-items-center">
    <h1>Table: <%= @table_name %></h1>
  </div>
  <div class="d-flex gap-2">
    <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#tableStructureModal">
      <i class="bi bi-table me-1"></i> Table Structure
    </button>
    <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#miniErdModal">
      <i class="bi bi-diagram-3 me-1"></i> View Relationships
    </button>
    <% if Dbviewer.configuration.enable_data_export %>
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#csvExportModal">
          <i class="bi bi-file-earmark-spreadsheet me-1"></i> Export CSV
        </button>
    <% end %>
    <%= link_to query_table_path(@table_name), class: "btn btn-primary" do %>
      <i class="bi bi-code-square me-1"></i> Run SQL Query
    <% end %>
  </div>
</div>

<% if Dbviewer.configuration.enable_data_export %>
  <!-- CSV Export Modal -->
  <div class="modal fade" id="csvExportModal" tabindex="-1" aria-labelledby="csvExportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="csvExportModalLabel">Export <strong><%= @table_name %></strong> to CSV</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <%= form_with url: export_csv_table_path(@table_name), method: :get, id: "csvExportForm" do |form| %>
            <div class="mb-3">
              <label for="limit" class="form-label">Maximum number of records</label>
              <input type="number" class="form-control" id="limit" name="limit" value="10000" min="1" max="100000">
              <div class="form-text">Limit the number of records to export. Large exports may take some time.</div>
            </div>
            
            <% if @total_count > 10000 %>
              <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                This table has <%= number_with_delimiter(@total_count) %> records. Exporting all records may be slow.
              </div>
            <% end %>
            
            <div class="mb-3 form-check">
              <input type="checkbox" class="form-check-input" id="includeHeaders" name="include_headers" checked>
              <label class="form-check-label" for="includeHeaders">Include column headers</label>
            </div>
          <% end %>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" form="csvExportForm" class="btn btn-success">
            <i class="bi bi-download me-1"></i> Export CSV
          </button>
        </div>
      </div>
    </div>
  </div>
<% end %>

<!-- Mini ERD Modal -->
<div class="modal fade" id="miniErdModal" tabindex="-1" aria-labelledby="miniErdModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content" id="miniErdModalContent">
      <!-- Content will be loaded dynamically -->
      <div class="modal-body text-center p-0">
        <div id="mini-erd-container" class="w-100 d-flex justify-content-center align-items-center" style="min-height: 450px; height: 100%;">
          <div class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading relationships diagram...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Records Section -->
<div class="dbviewer-card card mb-4" id="table-section">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">
      <select id="per-page-select" class="form-select form-select-sm" onchange="window.location.href='<%= table_path(@table_name) %>?<%= per_page_url_params(@table_name) %>'">
        <% Dbviewer::TablesController.per_page_options.each do |option| %>
          <option value="<%= option %>" <%= 'selected' if @per_page == option %>><%= option %></option>
        <% end %>
      </select>
    </h5>
    <div class="d-flex align-items-center table-actions">
      <% if @order_by.present? %>
        <span class="badge bg-primary me-2" title="Sort order">
          <i class="bi bi-sort-<%= @order_direction == "ASC" ? "up" : "down" %> me-1"></i>
          <%= @order_by %> (<%= @order_direction == "ASC" ? "ascending" : "descending" %>)
        </span>
      <% end %>
      <span class="badge bg-secondary">Total: <%= @total_count %> records</span>
      <% active_filters = @column_filters.reject { |_, v| v.blank? }.size %>
      <% if active_filters > 0 %>
        <span class="badge bg-info ms-2" title="Active filters"><i class="bi bi-funnel-fill me-1"></i><%= active_filters %></span>
      <% end %>
      <button type="button" class="btn btn-outline-secondary btn-sm ms-2" id="fullscreen-toggle" title="Toggle fullscreen">
        <i class="bi bi-fullscreen" id="fullscreen-icon"></i>
      </button>
    </div>
  </div>
    <div class="card-body p-0">
      <div class="table-responsive dbviewer-scrollable">
        <%= form_with(url: table_path(@table_name), method: :get, local: true, id: "column-filters-form", class: "mb-0") do |form| %>
          <% # Hidden fields to preserve current parameters %>
          <%= form.hidden_field :per_page, value: @per_page %>
          <%= form.hidden_field :order_by, value: @order_by %>
          <%= form.hidden_field :order_direction, value: @order_direction %>
          <%= form.hidden_field :page, value: 1 %> <!-- Reset to first page on filter -->
          
          <table class="table table-bordered table-striped rounded-none">
              <thead class="dbviewer-table-header">
                <%= render_sortable_header_row(@records, @order_by, @order_direction, @table_name, @current_page, @per_page, @column_filters) %>
                <%= render_column_filters_row(form, @records, @columns, @column_filters) %>
              </thead>
              <%= render_table_body(@records, @metadata) %>
        </table>
        <% end %> <!-- End of form_with -->
      </div>
      <%= render_pagination(@table_name, @current_page, @total_pages, common_params) %>
    </div>
  </div>
</div>

<!-- Record Detail Modal -->
<div class="modal fade" id="recordDetailModal" tabindex="-1" aria-labelledby="recordDetailModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="recordDetailModalLabel"><%= @table_name %> Record Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Record Data Section -->
        <div class="table-responsive">
          <table class="table table-bordered record-detail-table">
            <thead>
              <tr>
                <th width="30%">Column</th>
                <th>Value</th>
              </tr>
            </thead>
            <tbody id="recordDetailTableBody">
              <!-- Record details will be inserted here dynamically -->
            </tbody>
          </table>
        </div>
        
        <!-- Relationships Section -->
        <div id="relationshipsSection" class="mt-4" style="display: none;">
          <h6 class="mb-3">
            <i class="bi bi-link-45deg me-2"></i>Relationships
          </h6>
          <div id="relationshipsContent">
            <!-- Relationships will be inserted here dynamically -->
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Table Structure Modal -->
<div class="modal fade" id="tableStructureModal" tabindex="-1" aria-labelledby="tableStructureModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="tableStructureModalLabel"><%= @table_name %> Structure</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <%= render 'table_structure' %>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<style>
  /* Column filter styling */
  .column-filters td {
    padding: 0.5rem;
    background-color: var(--bs-tertiary-bg, #f8f9fa);
  }
  
  /* Action column styling */
  .action-column {
    width: 60px;
    min-width: 60px; /* Ensure minimum width */
    white-space: nowrap;
    position: sticky;
    left: 0;
    z-index: 30; /* Increased z-index to ensure it stays on top */
    background-color: var(--bs-body-bg, #fff); /* Use body background color */
    box-shadow: 2px 0 4px rgba(0, 0, 0, 0.1);
    border-right: 1px solid var(--bs-border-color);
  }
  
  /* Ensure proper background color for actions column in dark mode */
  [data-bs-theme="dark"] .action-column {
    background-color: var(--bs-body-bg, #212529); /* Use body background in dark mode */
  }

  /* Maintain zebra striping with sticky action column */
  .table-striped > tbody > tr:nth-of-type(odd) > .action-column {
    background-color: var(--bs-tertiary-bg, #f8f9fa);
  }
  
  .table-striped > tbody > tr:nth-of-type(even) > .action-column {
    background-color: var(--bs-body-bg, #fff);
  }

  [data-bs-theme="dark"] .table-striped > tbody > tr:nth-of-type(odd) > .action-column {
    background-color: var(--bs-tertiary-bg, #2b3035);
  }
  
  [data-bs-theme="dark"] .table-striped > tbody > tr:nth-of-type(even) > .action-column {
    background-color: var(--bs-body-bg, #212529);
  }
  
  .view-record-btn {
    padding: 0.1rem 0.4rem;
    width: 32px;
  }
  
  .view-record-btn:hover {
    opacity: 0.85;
    transform: translateY(-1px);
  }
  
  /* Record detail modal styling */
  .record-detail-table tr:first-child th,
  .record-detail-table tr:first-child td {
    border-top: none;
  }
  
  .record-detail-table .code-block {
    background-color: var(--bs-light);
    padding: 0.5rem;
    border-radius: 0.25rem;
    overflow-x: auto;
    max-height: 200px;
  }
  
  /* Relationships section styling */
  #relationshipsSection {
    border-top: 1px solid var(--bs-border-color);
    padding-top: 1rem;
  }
  
  #relationshipsSection h6 {
    color: var(--bs-emphasis-color);
    margin-bottom: 1rem;
  }
  
  [data-bs-theme="dark"] #relationshipsSection {
    border-top-color: #495057;
  }
  
  .relationships-table .btn-outline-primary {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
  }
  
  .relationships-table code {
    background-color: var(--bs-gray-100);
    padding: 0.125rem 0.25rem;
    border-radius: 0.125rem;
    font-size: 0.875rem;
  }
  
  [data-bs-theme="dark"] .relationships-table code {
    background-color: var(--bs-gray-800);
    color: var(--bs-gray-100);
  }
    margin-bottom: 0;
  }
  
  [data-bs-theme="dark"] .record-detail-table .code-block {
    background-color: var(--bs-dark);
  }

  /* Fullscreen table styles */
  .table-fullscreen {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100vw !important;
    height: 100vh !important;
    z-index: 9999 !important;
    background: var(--bs-body-bg) !important;
    margin: 0 !important;
    border-radius: 0 !important;
    overflow: hidden !important;
    display: flex !important;
    flex-direction: column !important;
  }

  .table-fullscreen .card-body {
    flex: 1 !important;
    overflow: hidden !important;
    display: flex !important;
    flex-direction: column !important;
  }

  .table-fullscreen .table-responsive {
    flex: 1 !important;
    overflow: auto !important;
  }

  .table-fullscreen .card-header {
    flex-shrink: 0 !important;
    position: sticky !important;
    top: 0 !important;
    z-index: 10000 !important;
    background: var(--bs-body-bg) !important;
    border-bottom: 1px solid var(--bs-border-color) !important;
  }

  /* Hide pagination in fullscreen mode */
  .table-fullscreen .pagination-container {
    display: none !important;
  }

  /* Adjust table header in fullscreen */
  .table-fullscreen .dbviewer-table-header {
    position: sticky !important;
    top: 0 !important;
    z-index: 100 !important;
  }

  /* Ensure body doesn't scroll when table is fullscreen */
  body.table-fullscreen-active {
    overflow: hidden !important;
  }

  /* Fullscreen button hover effect */
  #fullscreen-toggle:hover {
    background-color: var(--bs-secondary-bg) !important;
    border-color: var(--bs-secondary-border-subtle) !important;
  }

  /* Smooth transitions */
  #table-section {
    transition: all 0.3s ease-in-out;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Record Detail Modal functionality
    const recordDetailModal = document.getElementById('recordDetailModal');
    if (recordDetailModal) {
      recordDetailModal.addEventListener('show.bs.modal', function (event) {
        // Button that triggered the modal
        const button = event.relatedTarget;
        
        // Extract record data from button's data attribute
        let recordData;
        let foreignKeys;
        try {
          recordData = JSON.parse(button.getAttribute('data-record-data'));
          foreignKeys = JSON.parse(button.getAttribute('data-foreign-keys') || '[]');
        } catch (e) {
          console.error('Error parsing record data:', e);
          recordData = {};
          foreignKeys = [];
        }
        
        // Update the modal's title with table name
        const modalTitle = recordDetailModal.querySelector('.modal-title');
        modalTitle.textContent = '<%= @table_name %> Record Details';
        
        // Populate the table with record data
        const tableBody = document.getElementById('recordDetailTableBody');
        tableBody.innerHTML = '';
        
        // Get all columns
        const columns = Object.keys(recordData);
        
        // Create rows for each column
        columns.forEach(column => {
          const row = document.createElement('tr');
          
          // Create column name cell
          const columnNameCell = document.createElement('td');
          columnNameCell.className = 'fw-bold';
          columnNameCell.textContent = column;
          row.appendChild(columnNameCell);
          
          // Create value cell
          const valueCell = document.createElement('td');
          let cellValue = recordData[column];
          
          // Format value differently based on type
          if (cellValue === null) {
            valueCell.innerHTML = '<span class="text-muted">NULL</span>';
          } else if (typeof cellValue === 'string' && cellValue.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/)) {
            // Handle datetime values
            const date = new Date(cellValue);
            if (!isNaN(date.getTime())) {
              valueCell.textContent = date.toLocaleString();
            } else {
              valueCell.textContent = cellValue;
            }
          } else if (typeof cellValue === 'string' && (cellValue.startsWith('{') || cellValue.startsWith('['))) {
            // Handle JSON values
            try {
              const jsonValue = JSON.parse(cellValue);
              const formattedJSON = JSON.stringify(jsonValue, null, 2);
              valueCell.innerHTML = `<pre class="mb-0 code-block">${formattedJSON}</pre>`;
            } catch (e) {
              valueCell.textContent = cellValue;
            }
          } else {
            valueCell.textContent = cellValue;
          }
          
          row.appendChild(valueCell);
          tableBody.appendChild(row);
        });
        
        // Populate relationships section
        const relationshipsSection = document.getElementById('relationshipsSection');
        const relationshipsContent = document.getElementById('relationshipsContent');
        const reverseForeignKeys = JSON.parse(button.dataset.reverseForeignKeys || '[]');
        
        // Check if we have any relationships to show
        const hasRelationships = (foreignKeys && foreignKeys.length > 0) || (reverseForeignKeys && reverseForeignKeys.length > 0);
        
        if (hasRelationships) {
          relationshipsSection.style.display = 'block';
          relationshipsContent.innerHTML = '';
          
          // Handle belongs_to relationships (foreign keys from this table)
          if (foreignKeys && foreignKeys.length > 0) {
            const activeRelationships = foreignKeys.filter(fk => {
              const columnValue = recordData[fk.column];
              return columnValue !== null && columnValue !== undefined && columnValue !== '';
            });
            
            if (activeRelationships.length > 0) {
              relationshipsContent.appendChild(createRelationshipSection('Belongs To', activeRelationships, recordData, 'belongs_to'));
            }
          }
          
          // Handle has_many relationships (foreign keys from other tables pointing to this table)
          if (reverseForeignKeys && reverseForeignKeys.length > 0) {
            const primaryKeyValue = recordData[Object.keys(recordData).find(key => key === 'id') || Object.keys(recordData)[0]];
            
            if (primaryKeyValue !== null && primaryKeyValue !== undefined && primaryKeyValue !== '') {
              relationshipsContent.appendChild(createRelationshipSection('Has Many', reverseForeignKeys, recordData, 'has_many', primaryKeyValue));
            }
          }
          
          // Show message if no active relationships
          if (relationshipsContent.children.length === 0) {
            relationshipsContent.innerHTML = `
              <div class="text-muted small">
                <i class="bi bi-info-circle me-1"></i>
                This record has no active relationships.
              </div>
            `;
          }
        } else {
          relationshipsSection.style.display = 'none';
        }
      });
    }
    
    // Column filter functionality
    const columnFilters = document.querySelectorAll('.column-filter');
    const operatorSelects = document.querySelectorAll('.operator-select');
    const filterForm = document.getElementById('column-filters-form');
    
    // Add debounce function to reduce form submissions
    function debounce(func, wait) {
      let timeout;
      return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(function() {
          func.apply(context, args);
        }, wait);
      };
    }
    
    // Function to submit the form
    const submitForm = debounce(function() {
      filterForm.submit();
    }, 500);
    
    // Add event listeners to all filter inputs
    columnFilters.forEach(function(filter) {
      // For text fields use input event
      filter.addEventListener('input', submitForm);
      
      // For date/time fields also use change event since they have calendar/time pickers
      if (filter.type === 'date' || filter.type === 'datetime-local' || filter.type === 'time') {
        filter.addEventListener('change', submitForm);
      }
    });
    
    // Add event listeners to operator selects
    operatorSelects.forEach(function(select) {
      select.addEventListener('change', submitForm);
    });
    
    // Add clear button functionality if there are any filters applied
    const hasActiveFilters = Array.from(columnFilters).some(input => input.value);
    
    if (hasActiveFilters) {
      // Add a clear filters button
      const paginationContainer = document.querySelector('nav[aria-label="Page navigation"]') || 
                                   document.querySelector('.table-responsive');
      
      if (paginationContainer) {
        const clearButton = document.createElement('div');
        clearButton.className = 'text-center mt-3';
        clearButton.innerHTML = '<button type="button" class="btn btn-sm btn-outline-secondary" id="clear-filters">' +
                               '<i class="bi bi-x-circle me-1"></i>Clear All Filters</button>';
        
        paginationContainer.insertAdjacentHTML('afterend', clearButton.outerHTML);
        
        document.getElementById('clear-filters').addEventListener('click', function() {
          // Reset all input values
          columnFilters.forEach(filter => filter.value = '');
          
          // Reset operator selects to their default values
          operatorSelects.forEach(select => {
            // Find the first option of the select (usually the default)
            if (select.options.length > 0) {
              select.selectedIndex = 0;
            }
          });
          
          submitForm();
        });
      }
    }
    
    // Load Mini ERD when modal is opened
    const miniErdModal = document.getElementById('miniErdModal');
    if (miniErdModal) {
      let isModalLoaded = false;
      let erdData = null;
      
      miniErdModal.addEventListener('show.bs.modal', function(event) {
        const modalContent = document.getElementById('miniErdModalContent');
        
        // Set loading state
        modalContent.innerHTML = `
          <div class="modal-header">
            <h5 class="modal-title">Relationships for <%= @table_name %></h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body p-0">
            <div id="mini-erd-container" class="w-100 d-flex justify-content-center align-items-center" style="min-height: 450px; height: 100%;">
              <div class="text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading relationships diagram...</p>
                <small class="text-muted">This may take a moment for tables with many relationships</small>
              </div>
            </div>
          </div>
        `;
        
        // Always fetch fresh data when modal is opened
        fetchErdData();
      });
      
      // Function to fetch ERD data
      function fetchErdData() {
        // Add cache-busting timestamp to prevent browser caching
        const cacheBuster = new Date().getTime();
        const fetchUrl = `<%= dbviewer.mini_erd_table_path(@table_name, format: :json) %>?_=${cacheBuster}`;
        
        fetch(fetchUrl)
          .then(response => {
            if (!response.ok) {
              throw new Error(`Server returned ${response.status} ${response.statusText}`);
            }
            return response.json(); // Parse as JSON instead of text
          })
          .then(data => {
            isModalLoaded = true;
            erdData = data; // Store the data
            renderMiniErd(data);
          })
          .catch(error => {
            console.error('Error loading mini ERD:', error);
            showErdError(error);
          });
      }
      
      // Function to show error modal
      function showErdError(error) {
        const modalContent = document.getElementById('miniErdModalContent');
        modalContent.innerHTML = `
          <div class="modal-header">
            <h5 class="modal-title">Relationships for <%= @table_name %></h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body p-0">
            <div class="alert alert-danger m-3">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              <strong>Error loading relationship diagram</strong>
              <p class="mt-2 mb-0">${error.message}</p>
            </div>
            <div class="m-3">
              <p><strong>Debug Information:</strong></p>
              <code>GET <%= dbviewer.mini_erd_table_path(@table_name, format: :json) %></code> failed
              <p class="mt-3">
                <button class="btn btn-sm btn-primary" onclick="retryLoadingMiniERD()">
                  <i class="bi bi-arrow-clockwise me-1"></i> Retry
                </button>
              </p>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        `;
      }
      
      // Function to render the ERD with Mermaid
      function renderMiniErd(data) {
        const modalContent = document.getElementById('miniErdModalContent');
        
        // Set up the modal content with container for ERD
        modalContent.innerHTML = `
          <div class="modal-header">
            <h5 class="modal-title">Relationships for <%= @table_name %></h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body p-0"> <!-- Removed padding for full width -->
            <div id="mini-erd-container" class="w-100 d-flex justify-content-center align-items-center" style="min-height: 450px; height: 100%;"> <!-- Increased height -->
              <div id="mini-erd-loading" class="d-flex justify-content-center align-items-center" style="height: 100%; min-height: 450px;">
                <div class="text-center">
                  <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <p>Generating Relationships Diagram...</p>
                </div>
              </div>
              <div id="mini-erd-error" class="alert alert-danger m-3 d-none">
                <h5>Error generating diagram</h5>
                <p id="mini-erd-error-message">There was an error rendering the relationships diagram.</p>
                <pre id="mini-erd-error-details" class="bg-light p-2 small mt-2"></pre>
              </div>
            </div>
            <div id="debug-data" class="d-none m-3 border-top pt-3">
              <details>
                <summary>Debug Information</summary>
                <div class="alert alert-info small">
                  <pre id="erd-data-debug" style="max-height: 100px; overflow: auto;">${JSON.stringify(data, null, 2)}</pre>
                </div>
              </details>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <a href="<%= dbviewer.entity_relationship_diagrams_path %>" class="btn btn-primary">View Full ERD</a>
          </div>
        `;
        
        try {
          const tables = data.tables || [];
          const relationships = data.relationships || [];
          
          // Validate data before proceeding
          if (!Array.isArray(tables) || !Array.isArray(relationships)) {
            showDiagramError('Invalid data format', 'The relationship data is not in the expected format.');
            console.error('Invalid data format received:', data);
            return;
          }

          console.log(`Found ${tables.length} tables and ${relationships.length} relationships`);
          
          // Create the ER diagram definition in Mermaid syntax
          let mermaidDefinition = 'erDiagram\n';
          
          // Add tables to the diagram - ensure we have at least one table
          if (tables.length === 0) {
            mermaidDefinition += `  <%= @table_name.gsub(/[^\w]/, '_') %> {\n`;
            mermaidDefinition += `    string id PK\n`;
            mermaidDefinition += `  }\n`;
          } else {
            tables.forEach(function(table) {
              const tableName = table.name;
              
              if (!tableName) {
                console.warn('Table with no name found:', table);
                return; // Skip this table
              }
              
              // Clean table name for mermaid (remove special characters)
              const cleanTableName = tableName.replace(/[^\w]/g, '_');
              
              // Make the current table stand out with a different visualization
              if (tableName === '<%= @table_name %>') {
                mermaidDefinition += `  ${cleanTableName} {\n`;
                mermaidDefinition += `    string id PK\n`;
                mermaidDefinition += `  }\n`;
              } else {
                mermaidDefinition += `  ${cleanTableName} {\n`;
                mermaidDefinition += `    string id\n`;
                mermaidDefinition += `  }\n`;
              }
            });
          }
          
          // Add relationships
          if (relationships && relationships.length > 0) {
            relationships.forEach(function(rel) {
              try {
                // Ensure all required properties exist
                if (!rel.from_table || !rel.to_table) {
                  console.error('Missing table in relationship:', rel);
                  return; // Skip this relationship
                }
                
                // Clean up table names for mermaid (remove special characters)
                const fromTable = rel.from_table.replace(/[^\w]/g, '_');
                const toTable = rel.to_table.replace(/[^\w]/g, '_');
                const relationLabel = rel.from_column || '';
                
                // Customize the display based on direction
                mermaidDefinition += `  ${fromTable} }|--|| ${toTable} : "${relationLabel}"\n`;
              } catch (err) {
                console.error('Error processing relationship:', err, rel);
              }
            });
          } else {
            // Add a note if no relationships are found
            mermaidDefinition += '  %% No relationships found for this table\n';
          }
          
          // Log the generated mermaid definition for debugging
          console.log('Mermaid Definition:', mermaidDefinition);
          
          // Hide the loading indicator first since render might take time
          document.getElementById('mini-erd-loading').style.display = 'none';
          
          // Render the diagram with Mermaid
          mermaid.render('mini-erd-graph', mermaidDefinition)
            .then(function(result) {
              console.log('Mermaid rendering successful');
              
              // Get the container
              const container = document.getElementById('mini-erd-container');
              
              // Insert the rendered SVG
              container.innerHTML = result.svg;
              
              // Style the SVG element for better fit
              const svgElement = container.querySelector('svg');
              if (svgElement) {
                // Set size attributes for the SVG
                svgElement.setAttribute('width', '100%');
                svgElement.setAttribute('height', '100%');
                svgElement.style.minHeight = '450px';
                svgElement.style.width = '100%';
                svgElement.style.height = '100%';
                
                // Set viewBox if not present to enable proper scaling
                if (!svgElement.getAttribute('viewBox')) {
                  const width = svgElement.getAttribute('width') || '100%';
                  const height = svgElement.getAttribute('height') || '100%';
                  svgElement.setAttribute('viewBox', `0 0 ${parseInt(width) || 1000} ${parseInt(height) || 800}`);
                }
              }
              
              // Apply SVG-Pan-Zoom to make the diagram interactive
              try {
                const svgElement = container.querySelector('svg');
                if (svgElement && typeof svgPanZoom !== 'undefined') {
                  // Make SVG take the full container width and ensure it has valid dimensions
                  svgElement.setAttribute('width', '100%');
                  svgElement.setAttribute('height', '100%');
                  
                  // Wait for SVG to be fully rendered with proper dimensions
                  setTimeout(() => {
                    try {
                      // Get dimensions to ensure they're valid before initializing pan-zoom
                      const clientRect = svgElement.getBoundingClientRect();
                      
                      // Only initialize if we have valid dimensions
                      if (clientRect.width > 0 && clientRect.height > 0) {
                        // Initialize SVG Pan-Zoom with more robust error handling
                        const panZoomInstance = svgPanZoom(svgElement, {
                          zoomEnabled: true,
                          controlIconsEnabled: true,
                          fit: false, // Don't automatically fit on init - can cause the matrix error
                          center: false, // Don't automatically center - can cause the matrix error
                          minZoom: 0.5,
                          maxZoom: 2.5,
                          beforeZoom: function() {
                            // Check if the SVG is valid for zooming
                            return svgElement.getBoundingClientRect().width > 0 && 
                                  svgElement.getBoundingClientRect().height > 0;
                          }
                        });
                        
                        // Store the panZoom instance for resize handling
                        container.panZoomInstance = panZoomInstance;
                        
                        // Manually fit and center after a slight delay
                        setTimeout(() => {
                          try {
                            panZoomInstance.resize();
                            panZoomInstance.fit();
                            panZoomInstance.center();
                          } catch(err) {
                            console.warn("Error during fit/center operation:", err);
                          }
                        }, 300);
                        
                        // Setup resize observer to maintain full size
                        const resizeObserver = new ResizeObserver(() => {
                          if (container.panZoomInstance) {
                            try {
                              // Reset zoom and center when container is resized
                              container.panZoomInstance.resize();
                              // Only fit and center if the element is visible with valid dimensions
                              if (svgElement.getBoundingClientRect().width > 0 && 
                                  svgElement.getBoundingClientRect().height > 0) {
                                container.panZoomInstance.fit();
                                container.panZoomInstance.center();
                              }
                            } catch(err) {
                              console.warn("Error during resize observer callback:", err);
                            }
                          }
                        });
                        
                        // Observe the container for size changes
                        resizeObserver.observe(container);
                        
                        // Also handle manual resize on modal resize
                        miniErdModal.addEventListener('resize.bs.modal', function() {
                          if (container.panZoomInstance) {
                            setTimeout(() => {
                              try {
                                container.panZoomInstance.resize();
                                // Only fit and center if the element is visible with valid dimensions
                                if (svgElement.getBoundingClientRect().width > 0 && 
                                    svgElement.getBoundingClientRect().height > 0) {
                                  container.panZoomInstance.fit();
                                  container.panZoomInstance.center();
                                }
                              } catch(err) {
                                console.warn("Error during modal resize handler:", err);
                              }
                            }, 300);
                          }
                        });
                      } else {
                        console.warn("Cannot initialize SVG-Pan-Zoom: SVG has invalid dimensions", clientRect);
                      }
                    } catch(err) {
                      console.warn("Error initializing SVG-Pan-Zoom:", err);
                    }
                  }, 500); // Increased delay to ensure SVG is fully rendered with proper dimensions
                }
              } catch (e) {
                console.warn('Failed to initialize svg-pan-zoom:', e);
                // Not critical, continue without pan-zoom
              }
              
              // Add highlighting for the current table after a delay to ensure SVG is fully processed
              setTimeout(function() {
                try {
                  const cleanTableName = '<%= @table_name %>'.replace(/[^\w]/g, '_');
                  const currentTableElement = container.querySelector(`[id*="${cleanTableName}"]`);
                  if (currentTableElement) {
                    const rect = currentTableElement.querySelector('rect');
                    if (rect) {
                      // Highlight the current table
                      rect.setAttribute('fill', document.documentElement.getAttribute('data-bs-theme') === 'dark' ? '#2c3034' : '#e2f0ff');
                      rect.setAttribute('stroke', document.documentElement.getAttribute('data-bs-theme') === 'dark' ? '#6ea8fe' : '#0d6efd');
                      rect.setAttribute('stroke-width', '2');
                    }
                  }
                } catch (e) {
                  console.error('Error highlighting current table:', e);
                }
              }, 100);
            })
            .catch(function(error) {
              console.error('Error rendering mini ERD:', error);
              showDiagramError(
                'Error rendering diagram', 
                'There was an error rendering the relationships diagram.',
                error.message || 'Unknown error'
              );
              
              // Show debug data when there's an error
              document.getElementById('debug-data').classList.remove('d-none');
            });
        } catch (error) {
          console.error('Exception in renderMiniErd function:', error);
          showDiagramError(
            'Exception generating diagram', 
            'There was an exception processing the relationships diagram.',
            error.message || 'Unknown error'
          );
          
          // Show debug data when there's an error
          document.getElementById('debug-data').classList.remove('d-none');
        }
      }
      
      // Function to show diagram error
      function showDiagramError(title, message, details = '') {
        const errorContainer = document.getElementById('mini-erd-error');
        const errorMessage = document.getElementById('mini-erd-error-message');
        const errorDetails = document.getElementById('mini-erd-error-details');
        const loadingIndicator = document.getElementById('mini-erd-loading');
        
        if (loadingIndicator) {
          loadingIndicator.style.display = 'none';
        }
        
        if (errorContainer && errorMessage) {
          // Set error message
          errorMessage.textContent = message;
          
          // Set error details if provided
          if (details && errorDetails) {
            errorDetails.textContent = details;
            errorDetails.classList.remove('d-none');
          } else if (errorDetails) {
            errorDetails.classList.add('d-none');
          }
          
          // Show the error container
          errorContainer.classList.remove('d-none');
        }
      }
      
      // Handle modal shown event - adjust size after the modal is fully visible
      miniErdModal.addEventListener('shown.bs.modal', function(event) {
        // After modal is fully shown, resize the diagram to fit
        const container = document.getElementById('mini-erd-container');
        if (container && container.panZoomInstance) {
          setTimeout(() => {
            try {
              // Check if the SVG still has valid dimensions before operating on it
              const svgElement = container.querySelector('svg');
              if (svgElement && 
                  svgElement.getBoundingClientRect().width > 0 && 
                  svgElement.getBoundingClientRect().height > 0) {
                container.panZoomInstance.resize();
                container.panZoomInstance.fit();
                container.panZoomInstance.center();
              } else {
                console.warn("Cannot perform pan-zoom operations: SVG has invalid dimensions");
              }
            } catch(err) {
              console.warn("Error during modal shown handler:", err);
            }
          }, 500); // Increased delay to ensure modal is fully transitioned and SVG is rendered
        }
      });
      
      // Handle modal close to reset state for future opens
      miniErdModal.addEventListener('hidden.bs.modal', function(event) {
        // Reset flags and cached data to ensure fresh fetch on next open
        isModalLoaded = false;
        erdData = null;
        console.log('Modal closed, diagram data will be refetched on next open');
      });
    }
    
    // Function to retry loading the Mini ERD
    function retryLoadingMiniERD() {
      console.log('Retrying loading of mini ERD');
      const modalContent = document.getElementById('miniErdModalContent');
      
      // Set loading state again
      modalContent.innerHTML = `
        <div class="modal-header">
          <h5 class="modal-title">Relationships for <%= @table_name %></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body p-0">
          <div id="mini-erd-container" class="w-100 d-flex justify-content-center align-items-center" style="min-height: 450px; height: 100%;">
            <div class="text-center">
              <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p>Retrying to load relationships diagram...</p>
            </div>
          </div>
        </div>
      `;
      
      // Reset state to ensure fresh fetch
      isModalLoaded = false;
      erdData = null;
      
      // Retry fetching data
      fetchErdData();
    }
    
    // Column sorting enhancement
    const sortableColumns = document.querySelectorAll('.sortable-column');
    sortableColumns.forEach(column => {
      const link = column.querySelector('.column-sort-link');
      
      // Mouse over effects
      column.addEventListener('mouseenter', () => {
        const sortIcon = column.querySelector('.sort-icon');
        if (sortIcon && sortIcon.classList.contains('invisible')) {
          sortIcon.style.visibility = 'visible';
          sortIcon.style.opacity = '0.3';
        }
      });
      
      column.addEventListener('mouseleave', () => {
        const sortIcon = column.querySelector('.sort-icon');
        if (sortIcon && sortIcon.classList.contains('invisible')) {
          sortIcon.style.visibility = 'hidden';
          sortIcon.style.opacity = '0';
        }
      });
      
      // Keyboard accessibility
      if (link) {
        link.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            link.click();
          }
        });
      }
    });

    // Table fullscreen functionality
    const fullscreenToggle = document.getElementById('fullscreen-toggle');
    const fullscreenIcon = document.getElementById('fullscreen-icon');
    const tableSection = document.getElementById('table-section');
    
    if (fullscreenToggle && tableSection) {
      // Key for storing fullscreen state in localStorage
      const fullscreenStateKey = 'dbviewer-table-fullscreen-<%= @table_name %>';
      
      // Function to apply fullscreen state
      function applyFullscreenState(isFullscreen) {
        if (isFullscreen) {
          // Enter fullscreen
          tableSection.classList.add('table-fullscreen');
          document.body.classList.add('table-fullscreen-active');
          fullscreenIcon.classList.remove('bi-fullscreen');
          fullscreenIcon.classList.add('bi-fullscreen-exit');
          fullscreenToggle.setAttribute('title', 'Exit fullscreen');
        } else {
          // Exit fullscreen
          tableSection.classList.remove('table-fullscreen');
          document.body.classList.remove('table-fullscreen-active');
          fullscreenIcon.classList.remove('bi-fullscreen-exit');
          fullscreenIcon.classList.add('bi-fullscreen');
          fullscreenToggle.setAttribute('title', 'Toggle fullscreen');
        }
      }
      
      // Restore fullscreen state from localStorage on page load
      try {
        const savedState = localStorage.getItem(fullscreenStateKey);
        if (savedState === 'true') {
          applyFullscreenState(true);
        }
      } catch (e) {
        // Handle localStorage not available (private browsing, etc.)
        console.warn('Could not restore fullscreen state:', e);
      }
      
      fullscreenToggle.addEventListener('click', function() {
        const isFullscreen = tableSection.classList.contains('table-fullscreen');
        const newState = !isFullscreen;
        
        // Apply the new state
        applyFullscreenState(newState);
        
        // Save state to localStorage
        try {
          localStorage.setItem(fullscreenStateKey, newState.toString());
        } catch (e) {
          // Handle localStorage not available (private browsing, etc.)
          console.warn('Could not save fullscreen state:', e);
        }
      });
      
      // Exit fullscreen with Escape key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && tableSection.classList.contains('table-fullscreen')) {
          fullscreenToggle.click();
        }
      });
    }
  });
  
  // Helper function to create relationship sections
  function createRelationshipSection(title, relationships, recordData, type, primaryKeyValue = null) {
    const section = document.createElement('div');
    section.className = 'relationship-section mb-4';
    
    // Create section header
    const header = document.createElement('h6');
    header.className = 'mb-3';
    const icon = type === 'belongs_to' ? 'bi-arrow-up-right' : 'bi-arrow-down-left';
    header.innerHTML = `<i class="bi ${icon} me-2"></i>${title}`;
    section.appendChild(header);
    
    const tableContainer = document.createElement('div');
    tableContainer.className = 'table-responsive';
    
    const table = document.createElement('table');
    table.className = 'table table-sm table-bordered';
    
    // Create header based on relationship type
    const thead = document.createElement('thead');
    if (type === 'belongs_to') {
      thead.innerHTML = `
        <tr>
          <th width="25%">Column</th>
          <th width="25%">Value</th>
          <th width="25%">References</th>
          <th width="25%">Action</th>
        </tr>
      `;
    } else {
      thead.innerHTML = `
        <tr>
          <th width="30%">Related Table</th>
          <th width="25%">Foreign Key</th>
          <th width="20%">Count</th>
          <th width="25%">Action</th>
        </tr>
      `;
    }
    table.appendChild(thead);
    
    // Create body
    const tbody = document.createElement('tbody');
    
    relationships.forEach(fk => {
      const row = document.createElement('tr');
      
      if (type === 'belongs_to') {
        const columnValue = recordData[fk.column];
        row.innerHTML = `
          <td class="fw-medium">${fk.column}</td>
          <td><code>${columnValue}</code></td>
          <td>
            <span class="text-muted">${fk.to_table}.</span><strong>${fk.primary_key}</strong>
          </td>
          <td>
            <a href="/dbviewer/tables/${fk.to_table}?column_filters[${fk.primary_key}]=${encodeURIComponent(columnValue)}" 
               class="btn btn-sm btn-outline-primary" 
               title="View referenced record in ${fk.to_table}">
              <i class="bi bi-arrow-right me-1"></i>View
            </a>
          </td>
        `;
      } else {
        // For has_many relationships
        row.innerHTML = `
          <td class="fw-medium">${fk.from_table}</td>
          <td>
            <span class="text-muted">${fk.from_table}.</span><strong>${fk.column}</strong>
          </td>
          <td>
            <span class="badge bg-secondary">View All</span>
          </td>
          <td>
            <a href="/dbviewer/tables/${fk.from_table}?column_filters[${fk.column}]=${encodeURIComponent(primaryKeyValue)}" 
               class="btn btn-sm btn-outline-success" 
               title="View all ${fk.from_table} records that reference this record">
              <i class="bi bi-list me-1"></i>View Related
            </a>
          </td>
        `;
      }
      
      tbody.appendChild(row);
    });
    
    table.appendChild(tbody);
    tableContainer.appendChild(table);
    section.appendChild(tableContainer);
    
    return section;
  }
</script>
